@page "/admin/books/confirm/{id:long}"
@inherits OwningComponentBase<IBookstoreProjectRepository>

<div class="alert alert-danger text-white text-center">
    <i class="bi bi-exclamation-triangle"></i>
    <h2>Are you sure that you want to DELETE the folowing book:</h2>
</div>

<h3 class="bg-info text-white text-center p-1">@Book.Title</h3>


<table class="table table-sm table-bordered table-striped">
    <tbody>
        <tr><th>ID</th><td>@Book.BookId</td></tr>
        <tr><th>Name</th><td>@Book.Title</td></tr>
        <tr><th>Category</th><td>@Book.Category</td></tr>
        <tr><th>Price</th><td>@Book.Price.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td></tr>
    </tbody>
</table>

<button class="btn btn-danger btn-sm" @onclick="@(x=>RemoveBook(Book))">
    Delete
</button>
<NavLink class="btn btn-warning" href="@EditUrl">Edit Book</NavLink>
<NavLink class="btn btn-secondary" href="/admin/books">Back</NavLink>


@code {
    [Inject]
    public IBookstoreProjectRepository repo { get; set; }
    [Parameter]
    public long Id { get; set; }
    public Book Book { get; set; }
    public IEnumerable<Book> BookData { get; set; }
    protected override void OnParametersSet()
    {
        Book = repo.Books.FirstOrDefault(p => p.BookId == Id);
    }
    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }
    public async Task RemoveBook(Book b)
    {
        repo.DeleteProduct(b);
        await UpdateData();
    }
    public string EditUrl => $"/admin/books/edit/{Book.BookId}";

}